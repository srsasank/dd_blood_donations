library(xgboost)
dtrain <- xgb.DMatrix(data = train_new,label = result)
str(trainDT)
View(trainDT)
View(trainDT)
setDT(train_new)
View(train_new)
View(train_new)
setDT(test_new)
View(test_new)
View(test_new)
str(train_new)
trainDT <- as.data.table(train_new)
View(trainDT)
View(trainDT)
str(trainDT)
dtrain <- xgb.DMatrix(data = train_new,label = train_new$result)
dtrain <- xgb.DMatrix(data = trainDT,label = result)
str(trainDT)
write.csv(train_new, "train_new.csv")
write.csv(test_new, "test_new.csv")
write.csv(test_new, "test_new.csv",row.names = FALSE)
write.csv(train_new, "train_new.csv",row.names = FALSE)
trainDT <- fread("train_new.csv")
str(trainDT)
dtrain <- xgb.DMatrix(data = trainDT,label = result)
trainDT[,-result]
train_newT[,-result]
train_new[,-result]
trainDT2 <- select(trainDT, - result)
View(trainDT2)
View(trainDT2)
trainlbl <- select(trainDT, result)
dtrain <- xgb.DMatrix(data = data.matrix(trainDT2),label = data.matrix(trainlbl))
dtest <- xgb.DMatrix(data = data.matrix(testDT2),label=data.matrix(testlbl))
testDT <- fread("test_new.csv")
testDT2 <- select(testDT, - result)
testlbl <- select(testDT, result)
dtest <- xgb.DMatrix(data = data.matrix(testDT2),label=data.matrix(testlbl))
params <- list(
booster = "gbtree",
objective = "binary:logistic",
eta=0.3,
gamma=0,
max_depth=6,
min_child_weight=1,
subsample=1,
colsample_bytree=1
)
xgbcv <- xgb.cv(params = params
,data = dtrain
,nrounds = 200
,nfold = 5
,showsd = T
,stratified = T
,print.every.n = 10
,early.stop.round = 20
,maximize = F
)
xgbcv <- xgb.cv(params = params
,data = dtrain
,nrounds = 200
,nfold = 5
,showsd = T
,stratified = T
,print_every_n = 10
,early_stopping_rounds = 20
,maximize = F
)
xgbcv <- xgb.cv(params = params
,data = dtrain
,nrounds = 200
,nfold = 10
,showsd = T
,stratified = T
,print_every_n = 10
,early_stopping_rounds = 20
,maximize = F
)
min(xgbcv$test.error.mean)
min(xgbcv$test.error.mean)
xgbcv <- xgb.cv(params = params
,data = dtrain
,nrounds = 200
,nfold = 10
,showsd = T
,stratified = T
,print_every_n = 10
,early_stopping_rounds = 20
,maximize = F
)
min(xgbcv$test.error.mean)
xgb1 <- xgb.train(
params = params
,data = dtrain
,nrounds = 3
,watchlist = list(val=dtest,train=dtrain)
,print_every_n = 10
,early_stopping_rounds = 10
,maximize = F
,eval_metric = "error"
)
test$xgbpred <- predict(xgb1,dtest)
View(test)
View(test)
write.csv(test,"final_pred.csv")
xgb1 <- xgb.train(
params = params
,data = dtrain
,nrounds = 3
,watchlist = list(val=dtest,train=dtrain)
,print_every_n = 10
,early_stopping_rounds = 10
,maximize = F
,eval_metric = "logloss"
)
xgbcv <- xgb.cv(params = params
,data = dtrain
,nrounds = 200
,nfold = 10
,showsd = T
,stratified = T
,print_every_n = 10
,early_stopping_rounds = 20
,maximize = F,
eval_metric = "logloss"
)
params <- list(
booster = "gbtree",
objective = "binary:logistic",
eta=0.3,
gamma=5,
max_depth=6,
min_child_weight=1,
subsample=1,
colsample_bytree=1
)
xgbcv <- xgb.cv(params = params
,data = dtrain
,nrounds = 200
,nfold = 10
,showsd = T
,stratified = T
,print_every_n = 10
,early_stopping_rounds = 20
,maximize = F,
eval_metric = "logloss"
)
min(xgbcv$test.error.mean)
xgb1 <- xgb.train(
params = params
,data = dtrain
,nrounds = 10
,watchlist = list(val=dtest,train=dtrain)
,print_every_n = 10
,early_stopping_rounds = 10
,maximize = F
,eval_metric = "logloss"
)
test$xgbpred <- predict(xgb1,dtest)
write.csv(test,"final_pred.csv")
write.csv(test,"final_pred.csv")
install.packages("ROSE")
library(ROSE)
trainrose <- ROSE(result ~ ., data = train_new, seed = 1)$data
View(trainrose)
View(trainrose)
write.csv(trainrose,"train_rose.csv",row.names = FALSE)
trainroseDT <- fread("train_rose.csv")
trainroseDT2 <- select(trainroseDT, - result)
trainroselbl <- select(trainroseDT, result)
dtrainrose <- xgb.DMatrix(data = data.matrix(trainroseDT2),label = data.matrix(trainroselbl))
params <- list(
booster = "gbtree",
objective = "binary:logistic",
eta=0.3,
gamma=5,
max_depth=6,
min_child_weight=1,
subsample=1,
colsample_bytree=1
)
xgbcv <- xgb.cv(params = params
,data = dtrainrose
,nrounds = 200
,nfold = 10
,showsd = T
,stratified = T
,print_every_n = 10
,early_stopping_rounds = 20
,maximize = F,
eval_metric = "logloss"
)
params <- list(
booster = "gbtree",
objective = "binary:logistic",
eta=0.3,
gamma=7,
max_depth=6,
min_child_weight=1,
subsample=1,
colsample_bytree=1
)
xgbcv <- xgb.cv(params = params
,data = dtrainrose
,nrounds = 200
,nfold = 10
,showsd = T
,stratified = T
,print_every_n = 10
,early_stopping_rounds = 20
,maximize = F,
eval_metric = "logloss"
)
params <- list(
booster = "gbtree",
objective = "binary:logistic",
eta=0.3,
gamma=10,
max_depth=6,
min_child_weight=1,
subsample=1,
colsample_bytree=1
)
xgbcv <- xgb.cv(params = params
,data = dtrainrose
,nrounds = 200
,nfold = 10
,showsd = T
,stratified = T
,print_every_n = 10
,early_stopping_rounds = 20
,maximize = F,
eval_metric = "logloss"
)
params <- list(
booster = "gbtree",
objective = "binary:logistic",
eta=0.3,
gamma=0,
max_depth=6,
min_child_weight=1,
subsample=1,
colsample_bytree=1
)
xgbcv <- xgb.cv(params = params
,data = dtrainrose
,nrounds = 200
,nfold = 10
,showsd = T
,stratified = T
,print_every_n = 10
,early_stopping_rounds = 20
,maximize = F,
eval_metric = "logloss"
)
params <- list(
booster = "gbtree",
objective = "binary:logistic",
eta=0.3,
gamma=3,
max_depth=6,
min_child_weight=1,
subsample=1,
colsample_bytree=1
)
xgbcv <- xgb.cv(params = params
,data = dtrainrose
,nrounds = 200
,nfold = 10
,showsd = T
,stratified = T
,print_every_n = 10
,early_stopping_rounds = 20
,maximize = F,
eval_metric = "logloss"
)
params <- list(
booster = "gbtree",
objective = "binary:logistic",
eta=0.3,
gamma=5,
max_depth=6,
min_child_weight=1,
subsample=1,
colsample_bytree=1
)
xgbcv <- xgb.cv(params = params
,data = dtrainrose
,nrounds = 200
,nfold = 10
,showsd = T
,stratified = T
,print_every_n = 10
,early_stopping_rounds = 20
,maximize = F,
eval_metric = "logloss"
)
params <- list(
booster = "gbtree",
objective = "binary:logistic",
eta=0.3,
gamma=6,
max_depth=6,
min_child_weight=1,
subsample=1,
colsample_bytree=1
)
xgbcv <- xgb.cv(params = params
,data = dtrainrose
,nrounds = 200
,nfold = 10
,showsd = T
,stratified = T
,print_every_n = 10
,early_stopping_rounds = 20
,maximize = F,
eval_metric = "logloss"
)
xgb1 <- xgb.train(
params = params
,data = dtrainrose
,nrounds = 9
,watchlist = list(val=dtest,train=dtrain)
,print_every_n = 10
,early_stopping_rounds = 10
,maximize = F
,eval_metric = "logloss"
)
params <- list(
booster = "gbtree",
objective = "binary:logistic",
eta=0.3,
gamma=5,
max_depth=6,
min_child_weight=1,
subsample=1,
colsample_bytree=1
)
xgbcv <- xgb.cv(params = params
,data = dtrain
,nrounds = 200
,nfold = 10
,showsd = T
,stratified = T
,print_every_n = 10
,early_stopping_rounds = 20
,maximize = F,
eval_metric = "logloss"
)
params <- list(
booster = "gbtree",
objective = "binary:logistic",
eta=0.3,
gamma=6,
max_depth=6,
min_child_weight=1,
subsample=1,
colsample_bytree=1
)
xgbcv <- xgb.cv(params = params
,data = dtrain
,nrounds = 200
,nfold = 10
,showsd = T
,stratified = T
,print_every_n = 10
,early_stopping_rounds = 20
,maximize = F,
eval_metric = "logloss"
)
params <- list(
booster = "gbtree",
objective = "binary:logistic",
eta=0.3,
gamma=4,
max_depth=6,
min_child_weight=1,
subsample=1,
colsample_bytree=1
)
xgbcv <- xgb.cv(params = params
,data = dtrain
,nrounds = 200
,nfold = 10
,showsd = T
,stratified = T
,print_every_n = 10
,early_stopping_rounds = 20
,maximize = F,
eval_metric = "logloss"
)
params <- list(
booster = "gbtree",
objective = "binary:logistic",
eta=0.3,
gamma=5,
max_depth=6,
min_child_weight=1,
subsample=1,
colsample_bytree=1
)
xgbcv <- xgb.cv(params = params
,data = dtrain
,nrounds = 200
,nfold = 10
,showsd = T
,stratified = T
,print_every_n = 10
,early_stopping_rounds = 20
,maximize = F,
eval_metric = "logloss"
)
params <- list(
booster = "gbtree",
objective = "binary:logistic",
eta=0.1,
gamma=5,
max_depth=6,
min_child_weight=1,
subsample=1,
colsample_bytree=1
)
xgbcv <- xgb.cv(params = params
,data = dtrain
,nrounds = 200
,nfold = 10
,showsd = T
,stratified = T
,print_every_n = 10
,early_stopping_rounds = 20
,maximize = F,
eval_metric = "logloss"
)
params <- list(
booster = "gbtree",
objective = "binary:logistic",
eta=0.1,
gamma=6,
max_depth=6,
min_child_weight=1,
subsample=1,
colsample_bytree=1
)
xgbcv <- xgb.cv(params = params
,data = dtrain
,nrounds = 200
,nfold = 10
,showsd = T
,stratified = T
,print_every_n = 10
,early_stopping_rounds = 20
,maximize = F,
eval_metric = "logloss"
)
min(xgbcv$test.error.mean)
xgb1 <- xgb.train(
params = params
,data = dtrain
,nrounds = 10
,watchlist = list(val=dtest,train=dtrain)
,print_every_n = 10
,early_stopping_rounds = 10
,maximize = F
,eval_metric = "logloss"
)
test$xgbpred <- predict(xgb1,dtest)
xgb1 <- xgb.train(
params = params
,data = dtrain
,nrounds = 48
,watchlist = list(val=dtest,train=dtrain)
,print_every_n = 10
,early_stopping_rounds = 10
,maximize = F
,eval_metric = "logloss"
)
test$xgbpred <- predict(xgb1,dtest)
write.csv(test,"final_pred2.csv")
params <- list(
booster = "gbtree",
objective = "binary:logistic",
eta=0.1,
gamma=5,
max_depth=6,
min_child_weight=1,
subsample=1,
colsample_bytree=1
)
xgbcv <- xgb.cv(params = params
,data = dtrainrose
,nrounds = 200
,nfold = 10
,showsd = T
,stratified = T
,print_every_n = 10
,early_stopping_rounds = 20
,maximize = F,
eval_metric = "logloss"
)
xgb1 <- xgb.train(
params = params
,data = dtrainrose
,nrounds = 25
,watchlist = list(val=dtest,train=dtrain)
,print_every_n = 10
,early_stopping_rounds = 10
,maximize = F
,eval_metric = "logloss"
)
test$xgbpredrose <- predict(xgb1,dtest)
write.csv(test,"final_predrose.csv")
